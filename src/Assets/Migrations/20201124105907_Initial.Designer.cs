// <auto-generated />
using System;
using Assets.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assets.Migrations
{
    [DbContext(typeof(AssetsDbContext))]
    [Migration("20201124105907_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Assets.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AllocatedContactId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AllocatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AllocatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Model")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Tag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_Asset")
                        .IsClustered();

                    b.HasAlternateKey("Guid")
                        .HasName("AK_Asset_Guid");

                    b.HasIndex("AllocatedContactId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("TenantId", "Guid")
                        .IsUnique()
                        .HasDatabaseName("IX_Asset_Tenant_Guid");

                    b.HasIndex("TenantId", "Tag")
                        .HasDatabaseName("IX_Asset_Tenant_Tag");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("Assets.Entities.AssetAllocationChange", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AssetId", "ContactId")
                        .HasName("PK_AssetAllocationChange")
                        .IsClustered();

                    b.HasIndex("ContactId");

                    b.ToTable("AssetAllocationChange");
                });

            modelBuilder.Entity("Assets.Entities.AssetComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_AssetComment")
                        .IsClustered();

                    b.HasAlternateKey("Guid")
                        .HasName("AK_AssetComment_Guid");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetComment");
                });

            modelBuilder.Entity("Assets.Entities.AssetPicture", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AssetId", "PictureId")
                        .HasName("PK_AssetPicture")
                        .IsClustered();

                    b.ToTable("AssetPicture");
                });

            modelBuilder.Entity("Assets.Entities.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_AssetType")
                        .IsClustered();

                    b.HasAlternateKey("Name")
                        .HasName("AK_AssetType_Name");

                    b.ToTable("AssetType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Computer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Monitor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Phone"
                        });
                });

            modelBuilder.Entity("Assets.Entities.Blob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Blob")
                        .IsClustered();

                    b.HasAlternateKey("Guid")
                        .HasName("AK_Blob_Guid");

                    b.ToTable("Blob");
                });

            modelBuilder.Entity("Assets.Entities.Computer", b =>
                {
                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<long?>("Memory")
                        .HasColumnType("bigint");

                    b.Property<string>("Processor")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ComputerId")
                        .HasName("PK_Computer")
                        .IsClustered();

                    b.ToTable("Computer");
                });

            modelBuilder.Entity("Assets.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_Contact")
                        .IsClustered();

                    b.HasAlternateKey("Guid")
                        .HasName("AK_Contact_Guid");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("TenantId", "Guid")
                        .IsUnique()
                        .HasDatabaseName("IX_Contact_Tenant_Guid");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Assets.Entities.ContactComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_ContactComment")
                        .IsClustered();

                    b.HasAlternateKey("Guid")
                        .HasName("AK_ContactComment_Guid");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactComment");
                });

            modelBuilder.Entity("Assets.Entities.ContactPicture", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ContactId", "PictureId")
                        .HasName("PK_ContactPicture")
                        .IsClustered();

                    b.ToTable("ContactPicture");
                });

            modelBuilder.Entity("Assets.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_ContactType")
                        .IsClustered();

                    b.HasAlternateKey("Name")
                        .HasName("AK_ContactType_Name");

                    b.ToTable("ContactType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Person"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Organisation"
                        });
                });

            modelBuilder.Entity("Assets.Entities.Monitor", b =>
                {
                    b.Property<int>("MonitorId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SizeInches")
                        .HasColumnType("DECIMAL(8,1)");

                    b.HasKey("MonitorId")
                        .HasName("PK_Monitor")
                        .IsClustered();

                    b.ToTable("Monitor");
                });

            modelBuilder.Entity("Assets.Entities.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.Property<string>("Imei")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("Memory")
                        .HasColumnType("bigint");

                    b.Property<string>("Processor")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("PhoneId")
                        .HasName("PK_Phone")
                        .IsClustered();

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Assets.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_Role")
                        .IsClustered();

                    b.HasAlternateKey("Name")
                        .HasName("AK_Role_Name");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Assets.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_Tenant")
                        .IsClustered();

                    b.HasAlternateKey("Area")
                        .HasName("AK_Tenant_Area");

                    b.HasAlternateKey("Name")
                        .HasName("AK_Tenant_Name");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Assets.Entities.TenantUserRole", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "UserId", "RoleId")
                        .HasName("PK_TenantUserRole")
                        .IsClustered();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUserRole");
                });

            modelBuilder.Entity("Assets.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("LastAccessedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Phone")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_User")
                        .IsClustered();

                    b.HasAlternateKey("UserName")
                        .HasName("AK_User_UserName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Assets.Entities.Asset", b =>
                {
                    b.HasOne("Assets.Entities.Contact", "AllocatedContact")
                        .WithMany("Assets")
                        .HasForeignKey("AllocatedContactId")
                        .HasConstraintName("FK_Asset_AllocatedContact")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Assets.Entities.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Asset_AssetType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.Tenant", "Tenant")
                        .WithMany("Assets")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Asset_Tenant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AllocatedContact");

                    b.Navigation("AssetType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Assets.Entities.AssetAllocationChange", b =>
                {
                    b.HasOne("Assets.Entities.Asset", "Asset")
                        .WithMany("AllocationChanges")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_AssetAllocationChange_Asset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_AssetAllocationChange_Contact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Assets.Entities.AssetComment", b =>
                {
                    b.HasOne("Assets.Entities.Asset", "Asset")
                        .WithMany("Comments")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_AssetComment_Asset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Assets.Entities.AssetPicture", b =>
                {
                    b.HasOne("Assets.Entities.Asset", "Asset")
                        .WithMany("Pictures")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_AssetPicture_Asset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.Blob", "Picture")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_AssetPicture_Blob")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Assets.Entities.Computer", b =>
                {
                    b.HasOne("Assets.Entities.Asset", "Asset")
                        .WithOne("Computer")
                        .HasForeignKey("Assets.Entities.Computer", "ComputerId")
                        .HasConstraintName("FK_Computer_Asset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Assets.Entities.Contact", b =>
                {
                    b.HasOne("Assets.Entities.ContactType", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("FK_Contact_ContactType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.Tenant", "Tenant")
                        .WithMany("Contacts")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Contact_Tenant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Assets.Entities.ContactComment", b =>
                {
                    b.HasOne("Assets.Entities.Contact", "Contact")
                        .WithMany("Comments")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactComment_Contact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Assets.Entities.ContactPicture", b =>
                {
                    b.HasOne("Assets.Entities.Blob", "Picture")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactPicture_Blob")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.Contact", "Contact")
                        .WithMany("Pictures")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactPicture_Contact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Assets.Entities.Monitor", b =>
                {
                    b.HasOne("Assets.Entities.Asset", "Asset")
                        .WithOne("Monitor")
                        .HasForeignKey("Assets.Entities.Monitor", "MonitorId")
                        .HasConstraintName("FK_Monitor_Asset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Assets.Entities.Phone", b =>
                {
                    b.HasOne("Assets.Entities.Asset", "Asset")
                        .WithOne("Phone")
                        .HasForeignKey("Assets.Entities.Phone", "PhoneId")
                        .HasConstraintName("FK_Phone_Asset")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Assets.Entities.TenantUserRole", b =>
                {
                    b.HasOne("Assets.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserTenantRole_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.Tenant", "Tenant")
                        .WithMany("UserRoles")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_TenantUserRole_Tenant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assets.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TenantUserRole_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assets.Entities.Asset", b =>
                {
                    b.Navigation("AllocationChanges");

                    b.Navigation("Comments");

                    b.Navigation("Computer");

                    b.Navigation("Monitor");

                    b.Navigation("Phone");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Assets.Entities.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Assets.Entities.Contact", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Comments");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Assets.Entities.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Assets.Entities.Tenant", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Contacts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
